<Page
    x:Class="BLE_Hackme.Scenario_14_PasswordBrute"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:BLE_Hackme"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:uc="using:BLE_Hackme.UserControls"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">


    <ScrollViewer Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Padding="12,10,12,12">
        <StackPanel>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Password brute force" Style="{StaticResource SampleHeaderTextStyle}"/>
                <FontIcon x:Name="Solved" Style="{StaticResource ScenarioCompletedIconStyle}" Glyph="&#xE930;" />
            </StackPanel>

            <uc:ScenarioSubHeaderIntro />

            <RichTextBlock TextWrapping="Wrap" Margin="0,0,0,0" Style="{StaticResource rtbFontStyle}">
                <Paragraph>
                    Lots of simple BLE devices work just like you saw in the previous tasks. 
                There is no security, anyone can connect to such device, and in order to control it, just valid data format to send is needed.
                Slightly more complex devices implement some sort of authentication, for example user password.
                Only the user who entered valid password in mobile application is authorized to operate it.
                In many cases the password is then sent by the application in plain, unencrypted form via BLE characteristic write.
                Devices often do not enforce changing default password (and many users leave this "12345678"), not to mention password complexity.
                Also, most devices do not have any password brute force prevention mechanisms in place.
                </Paragraph>
            </RichTextBlock>

            <uc:ScenarioSubHeaderTask />

            <RichTextBlock TextWrapping="Wrap" Margin="0,0,0,0" Style="{StaticResource rtbFontStyle}">
                <Paragraph>
                    The same light bulb RGB characteristic that you have exploited in previous task, has even more features.
                By sending another command to it, you can enable light bulb "special effects" mode.
                This special mode is however password protected. The password is just 3 digits (0-9).
                </Paragraph>
                <Paragraph>
                    Here is the relevant decompiled source code fragment:
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="20,10,0,0">
                    public static final byte FRAME_SUFFIX = (byte) -1;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="20,0,0,0">
                    public static final byte FX_FRAME_PREFIX = (byte) -66;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="20,0,0,0">
                    public static final byte FX_ON = (byte) 1;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="20,0,0,10">
                    public static final byte FX_OFF = (byte) 0;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="20,0,0,0">
                    public bool f(bool b) {
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    byte a;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    if (b == true) {
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="60,0,0,0">
                    a = FX_ON;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    }
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    else
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    {
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="60,0,0,0">
                    a = FX_OFF;
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    }
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    byte[] bArr = new byte[]{FX_FRAME_PREFIX, this.pass[0], this.pass[1], this.pass[2], a, FRAME_SUFFIX};
                </Paragraph>
                <Paragraph  FontFamily="Courier New" Margin="40,0,0,0">
                    return this.c.e.b(bArr);
                </Paragraph>
                <Paragraph FontFamily="Courier New" Margin="20,0,0,10">
                    }
                </Paragraph>
                <Paragraph Margin="0,5,0,0">
                    Your job is to:
                </Paragraph>
                <Paragraph Margin="10,5,0,0">
                    <Bold>1. Figure out proper command format</Bold> - analyse the decompiled code just like in previous task. 
                    The HackMe application will let you know in the status if the format of received command is valid but password wrong.
                </Paragraph>
                <Paragraph Margin="10,5,0,0">
                    <Bold>2. Brute force the password</Bold>. 
                    Trying each combination by manual writes is possible, but very time consuming.
                    Instead, we will use macros functionality again.
                </Paragraph>
                <Paragraph Margin="0,10,0,0">
                    Once you figured out the valid command format, record a simple macro with just a single password try.
                    Next, export the macro to external file and download it from your phone.
                    The export functionality is available after selecting menu by the macro name:
                </Paragraph>
                <Paragraph>
                    <InlineUIContainer>
                        <Image Source="../Assets/nrf_connect_macro_menu.png" Width="200" HorizontalAlignment="Center" Margin="20,5,5,5"/>
                    </InlineUIContainer>
                </Paragraph>
                <Paragraph>
                    The file is just a simple XML. It can easily be edited and extended - for example with more writes, to try out all the valid password combinations.
                    Some basic script writing skills to generate it will be useful. 
                    Next, you can upload the file back to your phone, and import the macro into nRF Connect, using import feature:
                </Paragraph>
                <Paragraph>
                    <InlineUIContainer>
                        <Image Source="../Assets/nrf_connect_import_macro.png" Width="200" HorizontalAlignment="Center" Margin="20,5,5,5"/>
                    </InlineUIContainer>
                </Paragraph>
                <Paragraph>
                    It is worth changing the "write description" in XML file (from the default generated by application) - for example to "try 003", "try 004" etc.
                    This way you will see the progres live during brute force:
                </Paragraph>
                <Paragraph>
                    <InlineUIContainer>
                        <Image Source="../Assets/nrf_connect_macro_pass_brute.png" Width="200" HorizontalAlignment="Center" Margin="20,5,5,5"/>
                    </InlineUIContainer>
                </Paragraph>
                <Paragraph>
                    The password is randomly generated, and it will be different after you restart HackMe application.
                </Paragraph>

            </RichTextBlock>

            <MediaElement x:Name="VoiceCongrats" />

            <uc:ScenarioSubHeaderSimulatedDevice />

            <StackPanel Orientation="Horizontal">
                <uc:LightBulbUserControl x:Name="LightBulb" />
                <!-- https://www.youtube.com/watch?v=dQw4w9WgXcQ -->
                <MediaElement x:Name="Rick" Visibility="Collapsed" Source="ms-appx:///Assets/rick.wmv" MaxWidth="400" AutoPlay="False" IsLooping="True" Margin="5,20,0,0" />
            </StackPanel>

            <TextBlock x:Name="ShowValidPin" FontSize="30"  Visibility="Collapsed" HorizontalAlignment="Center"/>

            <uc:ScenarioSubHeaderHints />

            <StackPanel Orientation="Vertical" x:Name="Hint1" Visibility="Collapsed" Margin="0,5,0,5" >
                <TextBlock TextWrapping="Wrap">
                    The decompiled method "f" takes a boolean as an input, and then depending on its value, 
                    constructs a new byte array "bArr", which is in fact the BLE command sent to device.
                    It consists of one byte prefix, following 3 bytes of password. Next - the value turning the effect on or off, finished by suffix byte.
                </TextBlock>
            </StackPanel>

            <StackPanel Orientation="Vertical" x:Name="Hint2" Visibility="Collapsed" Margin="0,5,0,5">
                <TextBlock TextWrapping="Wrap">
                    Signed byte -66 = 0xBE hex, -1 = 0xFF, 0 = 0x00, 1 = 0x01.
                </TextBlock>
            </StackPanel>

            <StackPanel Orientation="Vertical" x:Name="Hint3" Visibility="Collapsed" >
                <TextBlock TextWrapping="Wrap">
                    Valid command format is: 
                    <LineBreak/>BE PIN0 PIN1 PIN2 01|00 FF
                    <LineBreak/>where PIN0..3 are just the password digits, "01" means turning the effect on, "00" off. 
                </TextBlock>
            </StackPanel>

            <StackPanel Orientation="Vertical" x:Name="Hint4" Visibility="Collapsed" Margin="0,5,0,5">
                <RichTextBlock TextWrapping="Wrap">
                    <Paragraph>
                        Typical write request in the XML file looks like this:
                    </Paragraph>
                    <Paragraph Margin="10,5,0,0" FontFamily="Courier New">
                        &lt;write description="Write 0x0102 to 6834636b-6d33-4c31-3668-744275314203" 
                        characteristic-uuid="6834636b-6d33-4c31-3668-744275314203"
                        service-uuid="6834636b-6d33-4c31-3668-744275314221" value="0102" type="WRITE_REQUEST" /&gt;
                    </Paragraph>
                    <Paragraph Margin="0,5,0,0">
                        Change the "value" to the data you would like to send in write request, 
                        and then copy this line multiple times - with various "value" elements for trying various passwords.
                    </Paragraph>

                </RichTextBlock>
            </StackPanel>

 
        </StackPanel>
    </ScrollViewer>

</Page>
